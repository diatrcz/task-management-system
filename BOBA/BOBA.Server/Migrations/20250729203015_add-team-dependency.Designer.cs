// <auto-generated />
using System;
using BOBA.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BOBA.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250729203015_add-team-dependency")]
    partial class addteamdependency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BOBA.Server.Data.Choice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Approve the task and move it forward to the next phase of the workflow.",
                            Name = "Approve, Proceed to Next Phase"
                        },
                        new
                        {
                            Id = "2",
                            Description = "The task requires additional review before proceeding further.",
                            Name = "Needs Further Review"
                        },
                        new
                        {
                            Id = "3",
                            Description = "The task does not meet the requirements and needs to be completely reworked.",
                            Name = "Reject, Task Requires Redoing"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Approve the task but with some minor revisions or improvements.",
                            Name = "Approve with Minor Adjustments"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.FormDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadeddAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("TaskId");

                    b.ToTable("FormDocuments");
                });

            modelBuilder.Entity("BOBA.Server.Data.FormField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Validation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("TaskId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("BOBA.Server.Data.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BOBA.Server.Data.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentStateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskDocType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaskTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskDocTypes");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "A PDF document outlining the campaign overview and goals.",
                            Name = "Campaign Brief",
                            Type = "pdf"
                        },
                        new
                        {
                            Id = "2",
                            Description = "A Word document containing the legal agreement with the client.",
                            Name = "Client Contract",
                            Type = "docx"
                        },
                        new
                        {
                            Id = "3",
                            Description = "A PowerPoint presentation of design drafts and visual ideas.",
                            Name = "Design Mockup",
                            Type = "pptx"
                        },
                        new
                        {
                            Id = "4",
                            Description = "An Excel spreadsheet with performance analytics and KPIs.",
                            Name = "Performance Report",
                            Type = "xlsx"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Options")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Validation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskFields");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Deadline for task completion.",
                            Name = "Due Date",
                            Validation = "^\\d{4}-\\d{2}-\\d{2}$"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Task urgency level.",
                            Name = "Priority",
                            Options = "Low,Medium,High,Urgent",
                            Validation = "^(Low|Medium|High|Urgent)$"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Person responsible for the task.",
                            Name = "Assigned To"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Marketing channel the task belongs to.",
                            Name = "Channel",
                            Options = "Email,Social Media,SEO,Paid Ads,Events",
                            Validation = "^(Email|Social Media|SEO|Paid Ads|Events)$"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Estimated task budget.",
                            Name = "Budget",
                            Validation = "^\\d+(\\.\\d{1,2})?$"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentStateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EditRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FormFieldJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextStateJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("EditRoleId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskFlows");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CurrentStateId = "1",
                            FormFieldJson = "[{\"Id\":\"personalInfo\",\"Layout\":{\"Type\":\"grid\",\"Columns\":2,\"GapClasses\":\"gap-6\"},\"Fields\":[{\"Id\":\"firstName\",\"Type\":\"text\",\"Label\":\"First Name\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"lastName\",\"Type\":\"text\",\"Label\":\"Last Name\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null},{\"Id\":\"contactInfo\",\"Layout\":{\"Type\":\"full-width\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"email\",\"Type\":\"email\",\"Label\":\"Email Address\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"phone\",\"Type\":\"tel\",\"Label\":\"Phone Number\",\"Placeholder\":\"\",\"Required\":false,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null},{\"Id\":\"addressInfo\",\"Layout\":{\"Type\":\"combined\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"address\",\"Type\":\"text\",\"Label\":\"Address\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":[{\"Id\":\"cityStateZip\",\"Layout\":{\"Type\":\"grid\",\"Columns\":3,\"GapClasses\":\"gap-6\"},\"Fields\":[{\"Id\":\"city\",\"Type\":\"text\",\"Label\":\"City\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"state\",\"Type\":\"text\",\"Label\":\"State\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"zip\",\"Type\":\"text\",\"Label\":\"Zip Code\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null}]},{\"Id\":\"additionalInfo\",\"Layout\":{\"Type\":\"full-width\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"notes\",\"Type\":\"textarea\",\"Label\":\"Additional Notes\",\"Placeholder\":\"\",\"Required\":false,\"Disabled\":false,\"Rows\":4,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null}]",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"2\"}]",
                            TaskTypeId = "2"
                        },
                        new
                        {
                            Id = "2",
                            CurrentStateId = "2",
                            FormFieldJson = "[{\"Id\":\"personalInfo\",\"Layout\":{\"Type\":\"grid\",\"Columns\":2,\"GapClasses\":\"gap-6\"},\"Fields\":[{\"Id\":\"firstName\",\"Type\":\"text\",\"Label\":\"First Name\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"lastName\",\"Type\":\"text\",\"Label\":\"Last Name\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null},{\"Id\":\"contactInfo\",\"Layout\":{\"Type\":\"full-width\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"email\",\"Type\":\"email\",\"Label\":\"Email Address\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"phone\",\"Type\":\"tel\",\"Label\":\"Phone Number\",\"Placeholder\":\"\",\"Required\":false,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null},{\"Id\":\"addressInfo\",\"Layout\":{\"Type\":\"combined\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"address\",\"Type\":\"text\",\"Label\":\"Address\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":[{\"Id\":\"cityStateZip\",\"Layout\":{\"Type\":\"grid\",\"Columns\":3,\"GapClasses\":\"gap-6\"},\"Fields\":[{\"Id\":\"city\",\"Type\":\"text\",\"Label\":\"City\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"state\",\"Type\":\"text\",\"Label\":\"State\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}},{\"Id\":\"zip\",\"Type\":\"text\",\"Label\":\"Zip Code\",\"Placeholder\":\"\",\"Required\":true,\"Disabled\":false,\"Rows\":null,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null}]},{\"Id\":\"additionalInfo\",\"Layout\":{\"Type\":\"full-width\",\"Columns\":null,\"GapClasses\":null},\"Fields\":[{\"Id\":\"notes\",\"Type\":\"textarea\",\"Label\":\"Additional Notes\",\"Placeholder\":\"\",\"Required\":false,\"Disabled\":false,\"Rows\":4,\"StyleClasses\":{\"Container\":\"\",\"Label\":\"block text-sm font-medium text-gray-700 mb-1\",\"Input\":\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-300\"}}],\"SubSections\":null}]",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"3\"},{\"ChoiceId\":\"2\",\"NextStateId\":\"1\"},{\"ChoiceId\":\"3\",\"NextStateId\":\"9\"}]",
                            TaskTypeId = "2"
                        },
                        new
                        {
                            Id = "3",
                            CurrentStateId = "3",
                            FormFieldJson = "null",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"4\"},{\"ChoiceId\":\"2\",\"NextStateId\":\"2\"}]",
                            TaskTypeId = "2"
                        },
                        new
                        {
                            Id = "4",
                            CurrentStateId = "4",
                            FormFieldJson = "null",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"5\"},{\"ChoiceId\":\"2\",\"NextStateId\":\"3\"}]",
                            TaskTypeId = "2"
                        },
                        new
                        {
                            Id = "5",
                            CurrentStateId = "5",
                            FormFieldJson = "null",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"6\"},{\"ChoiceId\":\"2\",\"NextStateId\":\"4\"},{\"ChoiceId\":\"3\",\"NextStateId\":\"9\"}]",
                            TaskTypeId = "2"
                        },
                        new
                        {
                            Id = "6",
                            CurrentStateId = "6",
                            FormFieldJson = "null",
                            NextStateJson = "[{\"ChoiceId\":\"1\",\"NextStateId\":\"8\"},{\"ChoiceId\":\"2\",\"NextStateId\":\"5\"}]",
                            TaskTypeId = "2"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskStates");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Define campaign goals and target audience.",
                            IsFinal = false,
                            Name = "Planning"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Write copy and design assets.",
                            IsFinal = false,
                            Name = "Content Creation"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Content is reviewed internally by the marketing team.",
                            IsFinal = false,
                            Name = "Internal Review"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Waiting for client approval.",
                            IsFinal = false,
                            Name = "Client Review"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Client requested changes, content needs updating.",
                            IsFinal = false,
                            Name = "Revisions"
                        },
                        new
                        {
                            Id = "6",
                            Description = "Content is finalized and ready for scheduling.",
                            IsFinal = false,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = "7",
                            Description = "Campaign is scheduled for publishing.",
                            IsFinal = false,
                            Name = "Scheduled"
                        },
                        new
                        {
                            Id = "8",
                            Description = "Content has been posted on selected platforms.",
                            IsFinal = true,
                            Name = "Published"
                        },
                        new
                        {
                            Id = "9",
                            Description = "The task is completed and archived.",
                            IsFinal = true,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Plan, create, and schedule posts for social media platforms.",
                            Name = "Social Media Campaign"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Create and manage an advertising campaign across different channels.",
                            Name = "Ad Campaign"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Design and send promotional emails to targeted audiences.",
                            Name = "Email Marketing"
                        },
                        new
                        {
                            Id = "4",
                            Description = "Improve website SEO through keyword research and content updates.",
                            Name = "SEO Optimization"
                        },
                        new
                        {
                            Id = "5",
                            Description = "Analyze competitors, customer behavior, and industry trends.",
                            Name = "Market Research"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Content Team"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Design Team"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Advertising Team"
                        },
                        new
                        {
                            Id = "4",
                            Name = "SEO & Analytics Team"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Client Management"
                        });
                });

            modelBuilder.Entity("BOBA.Server.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskFlowTeam", b =>
                {
                    b.Property<string>("ReadOnlyRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReadOnlyRoleWorkflowsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReadOnlyRoleId", "ReadOnlyRoleWorkflowsId");

                    b.HasIndex("ReadOnlyRoleWorkflowsId");

                    b.ToTable("TaskFlowTeam");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("TeamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("BOBA.Server.Data.FormDocument", b =>
                {
                    b.HasOne("BOBA.Server.Data.TaskDocType", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocType");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BOBA.Server.Data.FormField", b =>
                {
                    b.HasOne("BOBA.Server.Data.TaskField", "TaskField")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TaskField");
                });

            modelBuilder.Entity("BOBA.Server.Data.Task", b =>
                {
                    b.HasOne("BOBA.Server.Data.User", "Assignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BOBA.Server.Data.User", "Creator")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.TaskState", "CurrentState")
                        .WithMany("CurrentStateTasks")
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Creator");

                    b.Navigation("CurrentState");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskDocType", b =>
                {
                    b.HasOne("BOBA.Server.Data.TaskType", null)
                        .WithMany("DocTypes")
                        .HasForeignKey("TaskTypeId");
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskFlow", b =>
                {
                    b.HasOne("BOBA.Server.Data.TaskState", "CurrentState")
                        .WithMany("CurrentStateTaskflows")
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.Team", "EditRole")
                        .WithMany("EditRoleWorkflows")
                        .HasForeignKey("EditRoleId");

                    b.HasOne("BOBA.Server.Data.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("EditRole");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BOBA.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BOBA.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BOBA.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskFlowTeam", b =>
                {
                    b.HasOne("BOBA.Server.Data.Team", null)
                        .WithMany()
                        .HasForeignKey("ReadOnlyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.TaskFlow", null)
                        .WithMany()
                        .HasForeignKey("ReadOnlyRoleWorkflowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("BOBA.Server.Data.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOBA.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskState", b =>
                {
                    b.Navigation("CurrentStateTaskflows");

                    b.Navigation("CurrentStateTasks");
                });

            modelBuilder.Entity("BOBA.Server.Data.TaskType", b =>
                {
                    b.Navigation("DocTypes");
                });

            modelBuilder.Entity("BOBA.Server.Data.Team", b =>
                {
                    b.Navigation("EditRoleWorkflows");
                });

            modelBuilder.Entity("BOBA.Server.Data.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("CreatedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
